"""
Django settings for Final_Project1 project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path
import time

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-p+dd$e#!l!rtv8fhl&x+q*i)m+2+$yfnt3nc^$y&ii(e@lw$4!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*',]

# Application definition

ASGI_APPLICATION = 'Final_Project1.asgi.application'

INSTALLED_APPS = [
    'simpleui',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'haystack',
    'channels',
    'django_celery_beat',
    'user',
    'chat',
    'dialogue',
    'order',
    'task',
    'commodity.apps.CommodityConfig',
    # 'cachalot',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'utils.middleware.BlockedIpMiddlewareIP',
]

ROOT_URLCONF = 'Final_Project1.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Final_Project1.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'ooad_final1',
        'USER': 'postgres',
        'PASSWORD': 'lhz13609840087',
        'HOST': 'localhost',
        'PORT': '5433',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 配置文件存储目录
MEDIA_ROOT = os.path.join(BASE_DIR, 'imageStore')
# 配置浏览器访问文件的地址：http://127.0.0.1:8000/media/...
MEDIA_URL = '/media/'


# STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
      os.path.join(BASE_DIR, "/static/"),
  ]

STATIC_ROOT = 'static'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}


CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": "",
            "CONNECTION_POOL_KWARGS": {"decode_responses": True, "max_connections": 100}
        }
    }
}

SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"
SESSION_CACHE_ALIAS = "default"

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.exmail.qq.com'
# 126和163邮箱的SMTP端口为25； QQ邮箱使用的SMTP端口为465
EMAIL_PORT = 465
# 如果使用QQ邮箱发送邮件，需要开启SSL加密, 如果在aliyun上部署，也需要开启ssl加密，同时修改端口为EMAIL_PORT = 465
EMAIL_USE_SSL = True
# 发送邮件的邮箱
EMAIL_HOST_USER = '11912814@mail.sustech.edu.cn'
# 在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = 'Lhz13609840087'
# 收件人看到的发件人
EMAIL_FROM = 'SustechStore<11912814@mail.sustech.edu.cn>'

# 官方用来修复CELERY_ENABLE_UTC=False and USE_TZ = False 时时间比较错误的问题；
# 详情见：https://github.com/celery/django-celery-beat/pull/216/files
DJANGO_CELERY_BEAT_TZ_AWARE = False
# 使用django_celery_beat插件用来动态配置任务
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

HAYSTACK_CONNECTIONS = {
    'default': {
        # 使用whoosh引擎
        'ENGINE': 'haystack.backends.whoosh_cn_backend.WhooshEngine',
        # 'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        # 索引文件路径
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    }
}

# 当添加、修改、删除数据时，自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

HAYSTACK_SEARCH_RESULTS_PER_PAGE = 6 # 指定搜索结果每页的条数

FILE_URL = "http://store.sustech.xyz:8080/api/commodity/download/?key="

# CACHALOT_ENABLED = True
# CACHALOT_CACHE_RANDOM = True

# LOG_PATH = os.path.join(
#     os.path.split(os.path.realpath(__file__))[0],
#     'log'
# )
# if not os.path.exists(LOG_PATH):
#     os.mkdir(LOG_PATH)
#
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': True,
#     'formatters': {
#         # 日志格式
#         'standard': {
#             'format': '[%(asctime)s] [%(filename)s:%(lineno)d] [%(module)s:%(funcName)s] '
#                       '[%(levelname)s]- %(message)s'},
#         'simple': {  # 简单格式
#             'format': '%(levelname)s %(message)s'
#         },
#     },
#     # 过滤
#     'filters': {
#     },
#     # 定义具体处理日志的方式
#     'handlers': {
#         # 默认记录所有日志
#         'warning': {
#             'level': 'INFO',
#             'class': 'logging.handlers.RotatingFileHandler',
#             'filename': os.path.join(LOG_PATH, 'warning-{}.log'.format(time.strftime('%Y-%m-%d'))),
#             'maxBytes': 1024 * 1024 * 5,  # 文件大小
#             'backupCount': 5,  # 备份数
#             'formatter': 'standard',  # 输出格式
#             'encoding': 'utf-8',  # 设置默认编码，否则打印出来汉字乱码
#         },
#         # 输出错误日志
#         'error': {
#             'level': 'ERROR',
#             'class': 'logging.handlers.RotatingFileHandler',
#             'filename': os.path.join(LOG_PATH, 'error-{}.log'.format(time.strftime('%Y-%m-%d'))),
#             'maxBytes': 1024 * 1024 * 5,  # 文件大小
#             'backupCount': 5,  # 备份数
#             'formatter': 'standard',  # 输出格式
#             'encoding': 'utf-8',  # 设置默认编码
#         },
#         # 控制台输出
#         'console': {
#             'level': 'DEBUG',
#             'class': 'logging.StreamHandler',
#             'formatter': 'standard'
#         },
#         # 输出info日志
#         'info': {
#             'level': 'INFO',
#             'class': 'logging.handlers.RotatingFileHandler',
#             'filename': os.path.join(LOG_PATH, 'info-{}.log'.format(time.strftime('%Y-%m-%d'))),
#             'maxBytes': 1024 * 1024 * 5,
#             'backupCount': 5,
#             'formatter': 'standard',
#             'encoding': 'utf-8',  # 设置默认编码
#         },
#     },
#     # 配置用哪几种 handlers 来处理日志
#     'loggers': {
#         # 类型 为 django 处理所有类型的日志， 默认调用
#         'django': {
#             'handlers': ['console', 'error', 'warning', 'info'],
#             'level': 'DEBUG',
#             'propagate': True
#         },
#         # log 调用时需要当作参数传入
#         'log': {
#             'handlers': ['error', 'info', 'console', 'warning'],
#             'level': 'INFO',
#             'propagate': True
#         },
#     }
# }